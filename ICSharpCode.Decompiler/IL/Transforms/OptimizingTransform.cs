// Copyright (c) 2014 Daniel Grunwald
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy of this
// software and associated documentation files (the "Software"), to deal in the Software
// without restriction, including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
// FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
using System;
using System.Linq;

namespace ICSharpCode.Decompiler.IL.Transforms
{
	/// <summary>
	/// This transform 'optimizes' the IL code: it replaces constructs that
	/// are generated by the C# compiler in debug mode with shorter constructs
	/// that are more straightforward to analyze.
	/// </summary>
	/// <remarks>
	/// The optimizations performed are:
	/// * 'nop' instructions are removed
	/// * TODO branches that lead to a 'return block' are replaced with a return instruction
	/// </remarks>
	public class OptimizingTransform : IILTransform
	{
		public void Run(ILFunction function, ILTransformContext context)
		{
			foreach (var block in function.Descendants.OfType<Block>()) {
				// Remove 'nop' instructions
				block.Instructions.RemoveAll(inst => inst.OpCode == OpCode.Nop);
				/* TODO we might need this for the 'return block' optimization
				// Ensure return blocks are inlined:
				if (block.Instructions.Count == 2 && block.Instructions[1].OpCode == OpCode.Return) {
					Return ret = (Return)block.Instructions[1];
					if (ret.ReturnValue != null && ret.ReturnValue.OpCode == OpCode.Pop && block.Instructions[0].ResultType != StackType.Void) {
						ret.ReturnValue = block.Instructions[0];
						block.Instructions.RemoveAt(0);
					}
				}
				*/
			}
		}
	}
}
