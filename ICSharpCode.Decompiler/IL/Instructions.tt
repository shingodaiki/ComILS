// Copyright (c) 2014 Daniel Grunwald
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy of this
// software and associated documentation files (the "Software"), to deal in the Software
// without restriction, including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
// FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	OpCode[] opCodes = {
		new OpCode("Nop", "No operation. Takes 0 arguments and returns void.",
			VoidResult, NoArguments),
		new OpCode("Pop", "Pops the top of the evaluation stack and returns the value.",
			NoArguments, ResultTypeParam),
		new OpCode("Peek", "Peeks at the top of the evaluation stack and returns the value. Corresponds to IL 'dup'.",
			Peeking, NoArguments, ResultTypeParam),
		new OpCode("Void", "Ignore the arguments and produce void. Used to prevent the end result of an instruction from being pushed to the evaluation stack.",
			VoidResult, Unary),
		new OpCode("BlockContainer", "A container of IL blocks.", VoidResult),
		new OpCode("Block", "A block of IL instructions."),
		new OpCode("LogicNot", "Unary operator that expects an input of type I4. Returns 1 (of type I4) if the input value is 0. Otherwise, returns 0 (of type I4).",
			ResultType("I4"), Unary),
		new OpCode("Add", "Adds two numbers.", BinaryNumeric),
		new OpCode("Sub", "Subtracts two numbers", BinaryNumeric),
		new OpCode("Mul", "Multiplies two numbers", BinaryNumeric),
		new OpCode("Div", "Divides two numbers", BinaryNumeric, MayThrow),
		new OpCode("Rem", "Division remainder", BinaryNumeric, MayThrow),
		new OpCode("Neg", "Unary negation", Unary, ResultTypeParam),
		new OpCode("BitAnd", "Bitwise AND", BinaryNumeric),
		new OpCode("BitOr", "Bitwise OR", BinaryNumeric),
		new OpCode("BitXor", "Bitwise XOR", BinaryNumeric),
		new OpCode("BitNot", "Bitwise NOT", Unary, ResultTypeParam),
		new OpCode("Arglist", "Retrieves the RuntimeArgumentHandle.", NoArguments, ResultType("O")),
		new OpCode("ConditionalBranch", "<c>if (condition) goto target;</c>.",
			Unary, MayBranch, HasBranchTarget, VoidResult),
		new OpCode("Branch", "<c>goto target;</c>.",
			NoArguments, UnconditionalBranch, MayBranch, HasBranchTarget),
		new OpCode("DebugBreak", "Breakpoint instruction",
			NoArguments, VoidResult, SideEffect),
		new OpCode("Ceq", "Compare equal. Returns 1 (of type I4) if two numbers or object references are equal; 0 otherwise.",
			BinaryComparison),
		new OpCode("Cgt", "Compare greater than. For integers, perform a signed comparison. For floating-point numbers, return 0 for unordered numbers.",
			BinaryComparison),
		new OpCode("Cgt_Un", "Compare greater than (unordered/unsigned). For integers, perform a signed comparison. For floating-point numbers, return 1 for unordered numbers.",
			BinaryComparison),
		new OpCode("Clt", "Compare less than. For integers, perform a signed comparison. For floating-point numbers, return 0 for unordered numbers.",
			BinaryComparison),
		new OpCode("Clt_Un", "Compare less than (unordered/unsigned). For integers, perform a signed comparison. For floating-point numbers, return 1 for unordered numbers.",
			BinaryComparison),
		new OpCode("Call", "Non-virtual method call.", Call),
		new OpCode("CallVirt", "Virtual method call.", Call),
		new OpCode("CkFinite", "Checks that the float on top of the stack is not NaN or infinite.",
			Peeking, NoArguments, MayThrow, VoidResult),
		new OpCode("Conv", "Numeric cast.",
			Unary, CustomConstructor),
		new OpCode("LdLoc", "Loads the value of a local variable. (ldarg/ldloc)",
			NoArguments, HasVariableOperand, ResultType("Variable.Type.ToStackType()")),
		new OpCode("LdLoca", "Loads the address of a local variable. (ldarga/ldloca)",
			NoArguments, ResultType("Ref"), HasVariableOperand),
		new OpCode("StLoc", "Stores a value into a local variable. (starg/stloc)",
			Unary, VoidResult, HasVariableOperand),
		new OpCode("LdStr", "Loads a constant string.",
			LoadConstant, ResultType("O")),
		new OpCode("LdcI4", "Loads a constant 32-bit integer.",
			LoadConstant, ResultType("I4")),
		new OpCode("LdcI8", "Loads a constant 64-bit integer.",
			LoadConstant, ResultType("I8")),
		new OpCode("LdcF", "Loads a constant floating-point number.",
			LoadConstant, ResultType("F")),
		new OpCode("LdNull", "Loads the null reference.",
			LoadConstant, ResultType("O")),
		new OpCode("Return", "Returns from the current method or lambda.",
			MayBranch, UnconditionalBranch),
		new OpCode("Shl", "Shift left", BinaryNumeric),
		new OpCode("Shr", "Shift right", BinaryNumeric),
		
		new OpCode("Ldfld", "Load instance field",
			Unary, MayThrow, SideEffect, HasFieldOperand),
		new OpCode("Ldflda", "Load address of instance field",
			Unary, MayThrow, HasFieldOperand, ResultType("Ref")),
		new OpCode("Stfld", "Store value to instance field",
			Binary, SideEffect, MayThrow, VoidResult, HasFieldOperand),
		new OpCode("Ldsfld", "Load static field",
			NoArguments, SideEffect, HasFieldOperand),
		new OpCode("Ldsflda", "Load static field address",
			NoArguments, ResultType("Ref"), HasFieldOperand),
		new OpCode("Stsfld", "Store value to static field",
			Unary, SideEffect, VoidResult, HasFieldOperand),

		new OpCode("IsInst", "Test if object is instance of class or interface.",
			Unary, HasTypeOperand, ResultType("O")),
		new OpCode("LdInd", "Indirect load (ref/pointer dereference).",
			Unary, HasTypeOperand, SideEffect, MayThrow),
		new OpCode("UnboxAny", "Unbox a value.",
			Unary, HasTypeOperand, SideEffect, MayThrow),
		new OpCode("NewObj", "Creates an object instance and calls the constructor.",
			Call, ResultType("O")),
		new OpCode("Throw", "Throws an exception.",
			Unary, MayThrow, UnconditionalBranch),
		new OpCode("LdLen", "Returns the length of an array as 'native unsigned int'.",
			Unary, MayThrow, ResultType("I")),
		
		
	};
#>
using System;
using Mono.Cecil;

namespace ICSharpCode.Decompiler.IL
{
	/// <summary>
	/// Enum representing the type of an <see cref="ILInstruction"/>.
	/// </summary>
	public enum OpCode
	{
<#	foreach (OpCode opCode in opCodes) { #>
		/// <summary><#=opCode.Description#></summary>
		<#=opCode.Name#>,
<#  } #>
	}

<#	foreach (OpCode opCode in opCodes) { #>
	/// <summary><#=opCode.Description#></summary>
	public sealed partial class <#=opCode.Name#> : <#=opCode.BaseClass#>
	{
<#	if (opCode.GenerateConstructor) { #>
		public <#=opCode.Name#>(<#=string.Join(", ", opCode.ConstructorParameters)#>) : base(<#=string.Join(", ", opCode.BaseConstructorArguments)#>)
		{<#=Body(opCode.ConstructorBody)#>}
<#	} #>
<#	if (opCode.Flags.Count > 1) { #>
		protected override InstructionFlags ComputeFlags()
		{
			return <#=string.Join(" | ", opCode.Flags)#>;
		}
<#	} #>
<#=string.Join(Environment.NewLine, opCode.Members.Select(m => "\t\t" + m))#>
		public sealed override T AcceptVisitor<T>(ILVisitor<T> visitor)
		{
			return visitor.Visit<#=opCode.Name#>(this);
		}
	}

<#	} #>

	
	public abstract class ILVisitor<T>
	{
		protected abstract T Default(ILInstruction inst);
		
<#	foreach (OpCode opCode in opCodes) { #>
		protected internal virtual T Visit<#=opCode.Name#>(<#=opCode.Name#> inst)
		{
			return Default(inst);
		}
<#	} #>
	}
}

<#+
	static string Body(List<string> statements)
	{
		StringBuilder b = new StringBuilder();
		foreach (var st in statements) {
			b.AppendLine();
			b.Append("\t\t\t");
			b.Append(st);
		}
		b.AppendLine();
		b.Append("\t\t");
		return b.ToString();
	}

	class OpCode {
		public readonly string Name;
		public readonly string Description;

		public OpCode(string name, string description, params Action<OpCode>[] traits)
		{
			this.Name = name;
			this.Description = description;
			this.BaseConstructorArguments.Add("OpCode." + name);
			foreach (var trait in traits)
				trait(this);
		}

		public bool GenerateConstructor = true;
		public List<string> ConstructorParameters = new List<string>();
		public List<string> ConstructorBody = new List<string>();

		public string BaseClass = "ILInstruction";
		public List<string> BaseConstructorArguments = new List<string>();
		public List<string> Members = new List<string>();
		
		public List<string> Flags = new List<string>() { "base.ComputeFlags()" };
	}
	
	static Action<OpCode> CustomConstructor = opCode => {
		opCode.GenerateConstructor = false;
	};
	
	static Action<OpCode> HasFlag(string name)
	{
		return opCode => {
			opCode.Flags.Add(name);
		};
	}

	// Peeking trait: the instruction looks at the top-of-stack without popping
	static Action<OpCode> Peeking = HasFlag("InstructionFlags.MayPeek");
	
	// ResultType trait: the instruction has the specified result type.
	static Action<OpCode> ResultType(string type)
	{
		if (!type.Contains("."))
			type = "StackType." + type;
		return opCode => {
			opCode.Members.Add("public override StackType ResultType { get { return " + type + "; } }");
		};
	}
	
	// VoidResult trait: the instruction has no result and is not usable as an argument
	static Action<OpCode> VoidResult = ResultType("Void");

	// ResultTypeParam trait: the instruction takes its result type as ctor parameter
	static Action<OpCode> ResultTypeParam = opCode => {
		opCode.ConstructorParameters.Add("StackType resultType");
		opCode.ConstructorBody.Add("this.resultType = resultType;");
		opCode.Members.Add("StackType resultType;");
		opCode.Members.Add("public override StackType ResultType { get { return resultType; } }");
	};

	// MayThrow trait: the instruction may throw exceptions
	static Action<OpCode> MayThrow = HasFlag("InstructionFlags.MayThrow");
	
	// MayBranch trait: the instruction may cause control flow to branch (e.g. branch, conditionalbranch, return)
	static Action<OpCode> MayBranch = HasFlag("InstructionFlags.MayBranch");
	
	// HasBranchTarget trait: the instruction has an explicit branch target offset
	static Action<OpCode> HasBranchTarget = opCode => {};

	// UnconditionalBranch trait: the instruction does not produce a result normally; it always branches or throws an exception. Implies VoidResult.
	static Action<OpCode> UnconditionalBranch = opCode => {
		VoidResult(opCode);
	};
	
	// NoArguments trait: the instruction no arguments
	static Action<OpCode> NoArguments = opCode => {
		opCode.BaseClass = "SimpleInstruction";
	};
	
	// Unary trait: the instruction has a single argument
	static Action<OpCode> Unary = opCode => {
		opCode.BaseClass = "UnaryInstruction";
	};
	
	// Binary trait: the instruction has two arguments named 'Left' and 'Right'
	static Action<OpCode> Binary = opCode => {
		opCode.BaseClass = "BinaryInstruction";
	};

	// BinaryNumeric trait: the instruction is derived from BinaryNumericInstruction. Implies Binary and NonVoidResult; and implies MayThrow if the overflow mode is checked.
	static Action<OpCode> BinaryNumeric = opCode => {
		opCode.BaseClass = "BinaryNumericInstruction";
		opCode.ConstructorParameters.Add("StackType opType");
		opCode.ConstructorParameters.Add("StackType resultType");
		opCode.ConstructorParameters.Add("OverflowMode overflowMode");
		opCode.BaseConstructorArguments.Add("opType");
		opCode.BaseConstructorArguments.Add("resultType");
		opCode.BaseConstructorArguments.Add("overflowMode");
	};
	
	// BinaryNumeric trait: the instruction is derived from BinaryComparisonInstruction. Implies Binary and I4Result.
	static Action<OpCode> BinaryComparison = opCode => {
		opCode.BaseClass = "BinaryComparisonInstruction";
		opCode.ConstructorParameters.Add("StackType opType");
		opCode.BaseConstructorArguments.Add("opType");
	};

	// SideEffect trait: the instruction has a non-local side effect
	static Action<OpCode> SideEffect = HasFlag("InstructionFlags.SideEffect");

	// Call trait: the instruction performs a method call
	static Action<OpCode> Call = opCode => {
		opCode.BaseClass = "CallInstruction";
		opCode.ConstructorParameters.Add("MethodReference method");
		opCode.BaseConstructorArguments.Add("method");
	};

	// HasVariableOperand trait: the instruction refers to a local variable
	static Action<OpCode> HasVariableOperand = opCode => {};
	
	static Action<OpCode> HasFieldOperand = opCode => {};

	static Action<OpCode> HasTypeOperand = opCode => {};
	
	// LoadConstant trait: the instruction loads a compile-time constant. Implies NoArguments.
	static Action<OpCode> LoadConstant = opCode => {
		NoArguments(opCode);
	};
#>