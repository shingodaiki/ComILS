<?xml version="1.0" encoding="utf-8"?>
<Window
	x:Class="ICSharpCode.ILSpy.MainWindow"
	x:ClassModifier="public"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:tv="clr-namespace:ICSharpCode.TreeView;assembly=ICSharpCode.TreeView"
	xmlns:local="clr-namespace:ICSharpCode.ILSpy"
	xmlns:avalondock="http://schemas.xceed.com/wpf/xaml/avalondock"
	xmlns:avalondockproperties="clr-namespace:Xceed.Wpf.AvalonDock.Properties;assembly=Xceed.Wpf.AvalonDock"
	xmlns:docking="clr-namespace:ICSharpCode.ILSpy.Docking"
	xmlns:controls="clr-namespace:ICSharpCode.ILSpy.Controls"
	xmlns:analyzers="clr-namespace:ICSharpCode.ILSpy.Analyzers"
	xmlns:properties="clr-namespace:ICSharpCode.ILSpy.Properties"
	xmlns:viewmodels="clr-namespace:ICSharpCode.ILSpy.ViewModels"
	Title="ILSpy"
	MinWidth="250"
	MinHeight="200"
	UseLayoutRounding="True"
	TextOptions.TextFormattingMode="Display"
	FocusManager.FocusedElement="{Binding ElementName=treeView}"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008" d:DesignHeight="500" d:DesignWidth="500"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d"
>
	<Window.Resources>
		<BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
		<docking:ActiveDocumentConverter x:Key="ActiveDocumentConverter"/>
		<avalondock:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
		
		<tv:SharpTreeView x:Key="TreeView"
				AutomationProperties.Name="Assemblies and Classes"
				SelectionChanged="TreeView_SelectionChanged"
				ShowRoot="False"
				AllowDropOrder="True"
				AllowDrop="True"
				BorderThickness="0,1,1,1" Visibility="Visible" />

		<DataTemplate x:Key="AssemblyListPaneTemplate">
			<ContentControl Content="{StaticResource TreeView}" />
		</DataTemplate>

		<local:DebugSteps x:Key="DebugSteps" />

		<DataTemplate x:Key="DebugStepsPaneTemplate">
			<ContentControl Content="{StaticResource DebugSteps}" />
		</DataTemplate>

		<local:SearchPane x:Key="SearchPane" />

		<DataTemplate x:Key="SearchPaneTemplate">
			<ContentControl Content="{StaticResource SearchPane}" />
		</DataTemplate>

		<analyzers:AnalyzerTreeView x:Key="AnalyzerTreeView" />

		<DataTemplate x:Key="AnalyzerPaneTemplate">
			<ContentControl Content="{StaticResource AnalyzerTreeView}" />
		</DataTemplate>

		<ContentPresenter x:Key="MainPane" />

		<DataTemplate x:Key="DecompilerTextViewTemplate">
			<!-- decompilerTextView is inserted into the mainPane by code -->
			<ContentControl Content="{StaticResource MainPane}" />
		</DataTemplate>
	</Window.Resources>

	<Window.CommandBindings>
		<CommandBinding
			Command="Open"
			Executed="OpenCommandExecuted" />
		<CommandBinding
			Command="Refresh"
			Executed="RefreshCommandExecuted" />
		<CommandBinding
			Command="Save"
			CanExecute="SaveCommandCanExecute"
			Executed="SaveCommandExecuted" />
		<CommandBinding
			Command="BrowseBack"
			CanExecute="BackCommandCanExecute"
			Executed="BackCommandExecuted" />
		<CommandBinding
			Command="BrowseForward"
			CanExecute="ForwardCommandCanExecute"
			Executed="ForwardCommandExecuted" />
		<CommandBinding
			Command="Search"
			Executed="SearchCommandExecuted" />
	</Window.CommandBindings>
	<Window.InputBindings>
		<KeyBinding Key="R" Modifiers="Control" Command="{x:Static local:ILSpyCommands.Analyze}" />
	</Window.InputBindings>
	<Window.TaskbarItemInfo>
		<TaskbarItemInfo />
	</Window.TaskbarItemInfo>
	<DockPanel>
		<!-- Main menu -->
		<Menu DockPanel.Dock="Top" Name="mainMenu" Height="23" KeyboardNavigation.TabNavigation="None">
			<MenuItem Header="{x:Static properties:Resources._File}" />
			<!-- contents of file menu are added using MEF -->
			<MenuItem Header="{x:Static properties:Resources._View}">
				<MenuItem Header="{x:Static properties:Resources.Show_publiconlyTypesMembers}" IsCheckable="True" IsChecked="{Binding SessionSettings.FilterSettings.ApiVisPublicOnly}" />
				<MenuItem Header="{x:Static properties:Resources.Show_internalTypesMembers}" IsCheckable="True" IsChecked="{Binding SessionSettings.FilterSettings.ApiVisPublicAndInternal}" />
				<MenuItem Header="{x:Static properties:Resources.Show_allTypesAndMembers}" IsCheckable="True" IsChecked="{Binding SessionSettings.FilterSettings.ApiVisAll}" />
			</MenuItem>
		</Menu>
		<!-- ToolBar -->
		<ToolBar
			Name="toolBar"
			DockPanel.Dock="Top" ToolBarTray.IsLocked="True" KeyboardNavigation.TabNavigation="None">
			<ToolBar.Resources>
				<!-- Make images transparent if menu command is disabled -->
				<Style TargetType="{x:Type Image}">
					<Style.Triggers>
						<DataTrigger
							Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ButtonBase}, AncestorLevel=1}, Path=IsEnabled}"
							Value="False">
							<Setter Property="Opacity" Value="0.30" />
						</DataTrigger>
					</Style.Triggers>
				</Style>
			</ToolBar.Resources>
			<!-- 'Navigation' toolbar category is inserted here -->
			<Separator />
			<!-- 'Open' toolbar category is inserted here -->
			<Separator />
			<CheckBox IsChecked="{Binding SessionSettings.FilterSettings.ApiVisPublicOnly}" ToolTip="{x:Static properties:Resources.ShowPublicOnlyTypesMembers}">
				<Image Width="16" Height="16" Source="{controls:XamlResource Images/ShowPublicOnly}" />
			</CheckBox>
			<CheckBox IsChecked="{Binding SessionSettings.FilterSettings.ApiVisPublicAndInternal}" ToolTip="{x:Static properties:Resources.ShowInternalTypesMembers}">
				<Image Width="16" Height="16" Source="{controls:XamlResource Images/ShowPrivateInternal}" />
			</CheckBox>
			<CheckBox IsChecked="{Binding SessionSettings.FilterSettings.ApiVisAll}" ToolTip="{x:Static properties:Resources.ShowAllTypesAndMembers}">
				<Image Width="16" Height="16" Source="{controls:XamlResource Images/ShowAll}" />
			</CheckBox>
			<Separator />
			<ComboBox Name="languageComboBox" DisplayMemberPath="Name" Width="100" MaxDropDownHeight="Auto"
			          ItemsSource="{x:Static local:Languages.AllLanguages}" ToolTip="{x:Static properties:Resources.SelectLanguageDropdownTooltip}"
			          SelectedItem="{Binding SessionSettings.FilterSettings.Language}"/>
			<ComboBox Name="languageVersionComboBox" DisplayMemberPath="DisplayName" Width="120" MaxDropDownHeight="Auto" ToolTip="{x:Static properties:Resources.SelectVersionDropdownTooltip}"
			          Visibility="{Binding SelectedItem.HasLanguageVersions, ElementName=languageComboBox, Converter={StaticResource BooleanToVisibilityConverter}}"
			          ItemsSource="{Binding SelectedItem.LanguageVersions, ElementName=languageComboBox, UpdateSourceTrigger=PropertyChanged}"
			          SelectedItem="{Binding SessionSettings.FilterSettings.LanguageVersion, UpdateSourceTrigger=PropertyChanged}"/>
		</ToolBar>
		<Border DockPanel.Dock="Top" BorderBrush="Black" BorderThickness="1" Name="updatePanel" Visibility="Collapsed">
			<DockPanel KeyboardNavigation.TabNavigation="Contained">
				<Button DockPanel.Dock="Right" Click="updatePanelCloseButtonClick" MinWidth="0">X</Button>
				<StackPanel Orientation="Horizontal">
					<TextBlock Name="updatePanelMessage" Margin="4,0" VerticalAlignment="Center"  Text="{x:Static properties:Resources.ILSpyVersionAvailable}" />
					<Button Name="downloadOrCheckUpdateButton" Click="downloadOrCheckUpdateButtonClick" Content="{x:Static properties:Resources.Download}"/>
				</StackPanel>
			</DockPanel>
		</Border>
		<!-- Status bar -->
		<StatusBar x:Name="statusBar" DockPanel.Dock="Bottom" Height="26" Visibility="Collapsed">
			<StatusBarItem DockPanel.Dock="Right">
				<TextBlock VerticalAlignment="Center"
				           HorizontalAlignment="Right"
				           x:Name="StatusLabel"
				           ToolTip="{x:Static properties:Resources.Status}"
				           Text="{x:Static properties:Resources.StandBy}"/>
			</StatusBarItem>
		</StatusBar>

		<avalondock:DockingManager x:Name="DockManager"
								   DataContext="{Binding Workspace}"
								   AnchorablesSource="{Binding ToolPanes}" 
								   DocumentsSource="{Binding Documents}"
								   ActiveContent="{Binding ActiveDocument, Mode=Default, Converter={StaticResource ActiveDocumentConverter}}"
								   AllowMixedOrientation="True">

			<avalondock:DockingManager.Resources>


				<Style TargetType="avalondock:AnchorablePaneTitle">
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate>
								<Border Background="{TemplateBinding Background}"
						  BorderBrush="{TemplateBinding BorderBrush}"
						  BorderThickness="{TemplateBinding BorderThickness}">
									<Grid>
										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="*" />
											<ColumnDefinition Width="Auto" />
											<ColumnDefinition Width="Auto" />
											<ColumnDefinition Width="Auto" />
										</Grid.ColumnDefinitions>
										<avalondock:DropDownControlArea DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                                                      DropDownContextMenuDataContext="{Binding Path=LayoutItem, RelativeSource={RelativeSource TemplatedParent}}">
											<ContentPresenter Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"
                                  ContentTemplate="{Binding Model.Root.Manager.AnchorableTitleTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                                  ContentTemplateSelector="{Binding Model.Root.Manager.AnchorableTitleTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}" />
										</avalondock:DropDownControlArea>

										<avalondock:DropDownButton Style="{StaticResource {x:Static ToolBar.ToggleButtonStyleKey}}"
                                                 Focusable="False"
                                                 Grid.Column="1"
                                                 DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                                                 DropDownContextMenuDataContext="{Binding Path=LayoutItem, RelativeSource={RelativeSource TemplatedParent}}"
                                                 ToolTip="{x:Static avalondockproperties:Resources.Anchorable_CxMenu_Hint}">
											<Border Background="White">
												<Image Source="/Xceed.Wpf.AvalonDock;component/Themes/Generic/Images/PinMenu.png">
												</Image>
											</Border>
										</avalondock:DropDownButton>

										<Button x:Name="PART_AutoHidePin"
                      Grid.Column="2"
                      Focusable="False"
                      Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"
                      Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}"
                      Command="{Binding Path=LayoutItem.AutoHideCommand, RelativeSource={RelativeSource TemplatedParent}}"
                      ToolTip="{x:Static avalondockproperties:Resources.Anchorable_BtnAutoHide_Hint}">
											<Border Background="White">
												<Image Source="/Xceed.Wpf.AvalonDock;component/Themes/Generic/Images/PinAutoHide.png">
												</Image>
											</Border>
										</Button>

										<Button x:Name="PART_HidePin"
                      Grid.Column="3"
                      Focusable="False"
                      Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"
                      Visibility="{Binding Path=LayoutItem.Model.IsCloseable, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}"
                      Command="{Binding Path=LayoutItem.Model.CloseCommand, RelativeSource={RelativeSource TemplatedParent}}"
                      ToolTip="{x:Static avalondockproperties:Resources.Anchorable_BtnClose_Hint}">
											<Border Background="White">
												<Image Source="/Xceed.Wpf.AvalonDock;component/Themes/Generic/Images/PinClose.png">
												</Image>
											</Border>
										</Button>


									</Grid>
								</Border>
								<ControlTemplate.Triggers>
									<DataTrigger Binding="{Binding Model.IsAutoHidden, RelativeSource={RelativeSource Mode=Self}}"
                         Value="True">
										<Setter Property="LayoutTransform"
                      TargetName="PART_AutoHidePin">
											<Setter.Value>
												<RotateTransform Angle="90" />
											</Setter.Value>
										</Setter>
									</DataTrigger>
									<DataTrigger Binding="{Binding Model.CanClose, RelativeSource={RelativeSource Mode=Self}}"
                         Value="True">
										<Setter Property="Command"
                      TargetName="PART_HidePin"
                      Value="{Binding Path=LayoutItem.CloseCommand, RelativeSource={RelativeSource TemplatedParent}}" />
										<Setter Property="ToolTip"
                      TargetName="PART_HidePin"
                      Value="{x:Static avalondockproperties:Resources.Document_Close}" />

									</DataTrigger>
								</ControlTemplate.Triggers>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>

				<Style TargetType="{x:Type avalondock:LayoutAnchorableControl}">
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="{x:Type avalondock:LayoutAnchorableControl}">
								<Border Background="{TemplateBinding Background}"
                              BorderBrush="{TemplateBinding BorderBrush}"
                              BorderThickness="{TemplateBinding BorderThickness}"
                              KeyboardNavigation.TabNavigation="Cycle">
									<Grid>
										<Grid.RowDefinitions>
											<RowDefinition Height="Auto" />
											<RowDefinition Height="*" />
										</Grid.RowDefinitions>
										<Border x:Name="Header">
											<avalondock:AnchorablePaneTitle Model="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}" />
										</Border>

										<!--
                            Added ContentTemplate and ContentTemplateSelector 
                            https://github.com/xceedsoftware/wpftoolkit/issues/1525
                          -->
										<ContentPresenter Grid.Row="1"
                                            FlowDirection="{TemplateBinding FlowDirection}"
                                            Content="{Binding LayoutItem.View, RelativeSource={RelativeSource TemplatedParent}}"
                                            ContentTemplate="{Binding LayoutItem.View.ContentTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                                            ContentTemplateSelector="{Binding LayoutItem.View.ContentTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                            />

										<!--<ContentPresenter 
                                FlowDirection="{TemplateBinding FlowDirection}"
                                Content="{Binding Model.Content, RelativeSource={RelativeSource TemplatedParent}}" 
                                ContentTemplate="{Binding LayoutItemTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                                ContentTemplateSelector="{Binding LayoutItemTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                                Grid.Row="1"/>-->
									</Grid>
								</Border>
								<ControlTemplate.Triggers>
									<MultiDataTrigger>
										<MultiDataTrigger.Conditions>
											<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.IsFloating}"
                                       Value="True" />
											<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.Parent.IsDirectlyHostedInFloatingWindow}"
                                       Value="True" />
										</MultiDataTrigger.Conditions>
										<Setter Property="Visibility"
                                  Value="Collapsed"
                                  TargetName="Header" />
									</MultiDataTrigger>
								</ControlTemplate.Triggers>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>

				<!--AnchorablePaneControlStyle-->
				<Style x:Key="AnchorablePaneControlStyle"
         TargetType="{x:Type avalondock:LayoutAnchorablePaneControl}">
					<Setter Property="Foreground"
            Value="{Binding Model.Root.Manager.Foreground, RelativeSource={RelativeSource Self}}" />
					<Setter Property="Background"
            Value="{Binding Model.Root.Manager.Background, RelativeSource={RelativeSource Self}}" />
					<Setter Property="TabStripPlacement"
            Value="Bottom" />
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="{x:Type avalondock:LayoutAnchorablePaneControl}">
								<Grid ClipToBounds="true"
                SnapsToDevicePixels="true"
                KeyboardNavigation.TabNavigation="Local">
									<Grid.RowDefinitions>
										<RowDefinition Height="*" />
										<RowDefinition Height="Auto" />
									</Grid.RowDefinitions>
									<!--Following border is required to catch mouse events-->
									<Border Background="Transparent"
                    Grid.RowSpan="2" />
									<Border x:Name="ContentPanel"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Background="{TemplateBinding Background}"
                    Grid.Column="0"
                    KeyboardNavigation.DirectionalNavigation="Contained"
                    Grid.Row="0"
                    KeyboardNavigation.TabIndex="2"
                    KeyboardNavigation.TabNavigation="Cycle">
										<ContentPresenter x:Name="PART_SelectedContentHost"
                                ContentSource="SelectedContent"
                                Margin="{TemplateBinding Padding}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
									</Border>
									<avalondock:AnchorablePaneTabPanel x:Name="HeaderPanel"
                                                       Margin="2,0,2,2"
                                                       IsItemsHost="true"
                                                       Grid.Row="1"
                                                       KeyboardNavigation.TabIndex="1"
                                                       Panel.ZIndex="1" />
								</Grid>
								<ControlTemplate.Triggers>
									<Trigger Property="IsEnabled"
                     Value="false">
										<Setter Property="Foreground"
                      Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
									</Trigger>
								</ControlTemplate.Triggers>
							</ControlTemplate>
						</Setter.Value>
					</Setter>

					<Setter Property="ItemContainerStyle">
						<Setter.Value>
							<Style TargetType="{x:Type TabItem}">
								<Setter Property="IsSelected"
                  Value="{Binding IsSelected, Mode=TwoWay}" />
								<Setter Property="IsEnabled"
                  Value="{Binding IsEnabled}" />
								<Setter Property="ToolTip"
                  Value="{Binding ToolTip}" />
								<Setter Property="Template">
									<Setter.Value>
										<ControlTemplate TargetType="{x:Type TabItem}">
											<Grid SnapsToDevicePixels="true">
												<Border x:Name="Bd"
                          BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="1,0,1,1"
                          Background="{TemplateBinding Background}"
                          Padding="{TemplateBinding Padding}">
													<ContentPresenter x:Name="Content"
                                      ContentSource="Header"
                                      HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                      VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                      RecognizesAccessKey="True"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
												</Border>
											</Grid>
											<ControlTemplate.Triggers>
												<Trigger Property="Selector.IsSelected"
                           Value="true">
													<Setter Property="Background"
                            Value="White" />
													<Setter Property="Panel.ZIndex"
                            Value="1" />
													<Setter Property="Margin"
                            Value="0,-1,-1,-2" />
												</Trigger>
												<MultiTrigger>
													<MultiTrigger.Conditions>
														<Condition Property="IsMouseOver"
                                 Value="true" />
														<Condition Property="Selector.IsSelected"
                                 Value="false" />
													</MultiTrigger.Conditions>
													<Setter Property="Background"
                            Value="{DynamicResource {x:Static SystemColors.GradientInactiveCaptionBrushKey}}" />
													<Setter Property="BorderBrush"
                            Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
													<Setter Property="Panel.ZIndex"
                            Value="0" />
												</MultiTrigger>
												<Trigger Property="IsEnabled"
                           Value="false">
													<Setter Property="Foreground"
                            Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
												</Trigger>
											</ControlTemplate.Triggers>
										</ControlTemplate>
									</Setter.Value>
								</Setter>
								<Style.Triggers>
									<DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabControl}}, Path=Items.Count, FallbackValue=1}"
                         Value="1">
										<Setter Property="Visibility"
                      Value="Collapsed" />
									</DataTrigger>
								</Style.Triggers>
							</Style>
						</Setter.Value>
					</Setter>

					<Setter Property="ItemTemplate">
						<Setter.Value>
							<DataTemplate>
								<avalondock:LayoutAnchorableTabItem Model="{Binding}" />
							</DataTemplate>
						</Setter.Value>
					</Setter>

					<Setter Property="ContentTemplate">
						<Setter.Value>
							<DataTemplate>
								<avalondock:LayoutAnchorableControl Model="{Binding}" />
							</DataTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</avalondock:DockingManager.Resources>

			<avalondock:DockingManager.AnchorablePaneControlStyle>
				<StaticResource ResourceKey="AnchorablePaneControlStyle" />
			</avalondock:DockingManager.AnchorablePaneControlStyle>

			<avalondock:LayoutRoot>
				<avalondock:LayoutPanel Orientation="Horizontal">
					<avalondock:LayoutAnchorablePane DockMinWidth="150" Name="LeftPane" />
					<avalondock:LayoutPanel Orientation="Vertical">
						<avalondock:LayoutAnchorablePane DockMinHeight="150" Name="TopPane" />
						<avalondock:LayoutDocumentPane />
						<avalondock:LayoutAnchorablePane DockMinHeight="150" Name="BottomPane" />
					</avalondock:LayoutPanel>
					<avalondock:LayoutAnchorablePane DockMinWidth="150" Name="RightPane" />
				</avalondock:LayoutPanel>
			</avalondock:LayoutRoot>
			
			<avalondock:DockingManager.LayoutUpdateStrategy>
				<docking:LayoutUpdateStrategy />
			</avalondock:DockingManager.LayoutUpdateStrategy>

			<avalondock:DockingManager.LayoutItemTemplateSelector>
				<docking:PaneTemplateSelector>
					<docking:PaneTemplateSelector.Mappings>
						<docking:TemplateMapping Type="{x:Type viewmodels:AssemblyListPaneModel}" Template="{StaticResource AssemblyListPaneTemplate}" />
						<docking:TemplateMapping Type="{x:Type viewmodels:SearchPaneModel}" Template="{StaticResource SearchPaneTemplate}" />
						<docking:TemplateMapping Type="{x:Type viewmodels:DebugStepsPaneModel}" Template="{StaticResource DebugStepsPaneTemplate}" />
						<docking:TemplateMapping Type="{x:Type viewmodels:AnalyzerPaneModel}" Template="{StaticResource AnalyzerPaneTemplate}" />
						<docking:TemplateMapping Type="{x:Type viewmodels:DocumentModel}" Template="{StaticResource DecompilerTextViewTemplate}" />
					</docking:PaneTemplateSelector.Mappings>
				</docking:PaneTemplateSelector>
			</avalondock:DockingManager.LayoutItemTemplateSelector>

			<avalondock:DockingManager.LayoutItemContainerStyleSelector>
				<docking:PaneStyleSelector>
					<docking:PaneStyleSelector.ToolPaneStyle>
						<Style TargetType="{x:Type avalondock:LayoutItem}">
							<Setter Property="Title" Value="{Binding Model.Title}"/>
							<Setter Property="Visibility" Value="{Binding Model.IsVisible, Mode=TwoWay, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter={x:Static Visibility.Hidden}}"/>
							<Setter Property="ContentId" Value="{Binding Model.ContentId}"/>
							<Setter Property="IsSelected" Value="{Binding Model.IsSelected, Mode=TwoWay}"/>
							<Setter Property="IsActive" Value="{Binding Model.IsActive, Mode=TwoWay}"/>
							<Setter Property="CanClose" Value="{Binding Model.IsCloseable}" />
						</Style>
					</docking:PaneStyleSelector.ToolPaneStyle>
					<docking:PaneStyleSelector.DocumentStyle>
						<Style TargetType="{x:Type avalondock:LayoutItem}">
							<Setter Property="Title" Value="{Binding Model.Title}"/>
							<Setter Property="Visibility" Value="{Binding Model.IsVisible, Mode=TwoWay, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter={x:Static Visibility.Hidden}}"/>
							<Setter Property="ContentId" Value="{Binding Model.ContentId}"/>
							<Setter Property="IsSelected" Value="{Binding Model.IsSelected, Mode=TwoWay}"/>
							<Setter Property="IsActive" Value="{Binding Model.IsActive, Mode=TwoWay}"/>
							<Setter Property="CanClose" Value="{Binding Model.IsCloseable}" />
						</Style>
					</docking:PaneStyleSelector.DocumentStyle>
				</docking:PaneStyleSelector>
			</avalondock:DockingManager.LayoutItemContainerStyleSelector>
		</avalondock:DockingManager>
	</DockPanel>
</Window>
