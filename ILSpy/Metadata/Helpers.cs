// Copyright (c) 2011 AlphaSierraPapa for the SharpDevelop Team
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy of this
// software and associated documentation files (the "Software"), to deal in the Software
// without restriction, including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
// FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Reflection.Metadata.Ecma335;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Media;
using DataGridExtensions;
using ICSharpCode.ILSpy.Controls;
using ICSharpCode.ILSpy.ViewModels;

namespace ICSharpCode.ILSpy.Metadata
{
	static class Helpers
	{
		public static DataGrid PrepareDataGrid(TabPageModel tabPage)
		{
			if (!(tabPage.Content is DataGrid view && view.Name == "MetadataView")) {
				view = new DataGrid() {
					Name = "MetadataView",
					GridLinesVisibility = DataGridGridLinesVisibility.None,
					CanUserAddRows = false,
					CanUserDeleteRows = false,
					CanUserReorderColumns = false,
					RowHeaderWidth = 0,
					SelectionMode = DataGridSelectionMode.Single,
					SelectionUnit = DataGridSelectionUnit.FullRow,
					CellStyle = new Style {
						Setters = {
							new Setter {
								Property = Control.BorderThicknessProperty,
								Value = new Thickness(0)
							}
						}
					}
				};
				ContextMenuProvider.Add(view);
				ScrollViewer.SetIsDeferredScrollingEnabled(view, true);
				DataGridFilter.SetIsAutoFilterEnabled(view, true);
				DataGridFilter.SetContentFilterFactory(view, new RegexContentFilterFactory());
			}

			view.AutoGeneratingColumn += View_AutoGeneratingColumn;
			view.AutoGeneratedColumns += View_AutoGeneratedColumns;

			return view;
		}

		private static void View_AutoGeneratedColumns(object sender, EventArgs e)
		{
			((DataGrid)sender).AutoGeneratedColumns -= View_AutoGeneratedColumns;
			((DataGrid)sender).AutoGeneratingColumn -= View_AutoGeneratingColumn;
		}

		private static void View_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
		{
			var binding = new Binding(e.PropertyName) { Mode = BindingMode.OneWay };
			e.Column = new DataGridCustomTextColumn() {
				Header = e.PropertyName,
				Binding = binding,
				ToolTipBinding = new Binding(e.PropertyName + "Tooltip") { Mode = BindingMode.OneWay }
			};
			switch (e.PropertyName) {
				case "RID":
					e.Column.SetTemplate((ControlTemplate)MetadataTableViews.Instance["DefaultFilter"]);
					break;
				case "Token":
				case "Offset":
				case "RVA":
				case "Signature":
					binding.StringFormat = "X8";
					e.Column.SetTemplate((ControlTemplate)MetadataTableViews.Instance["HexFilter"]);
					break;
				case "Name":
					e.Column.SetTemplate((ControlTemplate)MetadataTableViews.Instance["DefaultFilter"]);
					break;
				case "Attributes":
				case "ImplAttributes":
					binding.Converter = new UnderlyingEnumValueConverter();
					binding.StringFormat = "X4";
					e.Column.SetTemplate((ControlTemplate)MetadataTableViews.Instance[e.PropertyType.Name + "Filter"]);
					break;
				default:
					e.Cancel = e.PropertyName.Contains("Tooltip");
					break;
			}
		}

		class UnderlyingEnumValueConverter : IValueConverter
		{
			public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
			{
				var t = value.GetType();
				if (t.IsEnum) {
					var u = t.GetEnumUnderlyingType();
					if (u == typeof(int))
						return (int)value;
				}
				return value;
			}

			public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
			{
				throw new NotImplementedException();
			}
		}

		public static string AttributesToString(TypeAttributes attributes)
		{
			const TypeAttributes allMasks = TypeAttributes.ClassSemanticsMask | TypeAttributes.CustomFormatMask | TypeAttributes.LayoutMask | TypeAttributes.ReservedMask | TypeAttributes.StringFormatMask | TypeAttributes.VisibilityMask;
			StringBuilder sb = new StringBuilder();
			var visibility = attributes & TypeAttributes.VisibilityMask;
			sb.AppendLine("Visibility: " + (visibility == 0 ? "NotPublic" : typeof(TypeAttributes).GetEnumName(visibility)));
			var layout = attributes & TypeAttributes.LayoutMask;
			sb.AppendLine("Class layout: " + (layout == 0 ? "AutoLayout" : typeof(TypeAttributes).GetEnumName(layout)));
			var semantics = attributes & TypeAttributes.ClassSemanticsMask;
			sb.AppendLine("Class semantics: " + (semantics == 0 ? "Class" : typeof(TypeAttributes).GetEnumName(semantics)));
			var stringFormat = attributes & TypeAttributes.StringFormatMask;
			sb.AppendLine("String format: " + (stringFormat == 0 ? "AnsiClass" : typeof(TypeAttributes).GetEnumName(stringFormat)));
			var customStringFormat = attributes & TypeAttributes.CustomFormatMask;
			sb.AppendLine("Custom string format: 0x" + customStringFormat.ToString("x"));
			var reserved = attributes & TypeAttributes.ReservedMask;
			sb.AppendLine("Reserved attributes: " + (reserved == 0 ? "" : reserved.ToString()));
			var additional = attributes & ~allMasks;
			sb.Append("Additional attributes: ");
			AdditionalAttributes(sb, (int)additional);
			if (sb.Length == 0)
				return null;
			return sb.ToString();
		}

		public static string AttributesToString(MethodAttributes attributes)
		{
			const MethodAttributes allMasks = MethodAttributes.MemberAccessMask | MethodAttributes.ReservedMask | MethodAttributes.VtableLayoutMask;
			StringBuilder sb = new StringBuilder();
			var visibility = attributes & MethodAttributes.MemberAccessMask;
			sb.AppendLine("MemberAccess: " + (visibility == 0 ? "CompilerControlled" : typeof(MethodAttributes).GetEnumName(visibility)));
			var layout = attributes & MethodAttributes.VtableLayoutMask;
			sb.AppendLine("V-Table layout: " + (layout == 0 ? "ReuseSlot" : typeof(MethodAttributes).GetEnumName(layout)));
			var reserved = attributes & MethodAttributes.ReservedMask;
			sb.AppendLine("Reserved attributes: " + (reserved == 0 ? "" : reserved.ToString()));
			var additional = attributes & ~allMasks;
			sb.Append("Additional attributes: ");
			AdditionalAttributes(sb, (int)additional);
			if (sb.Length == 0)
				return null;
			return sb.ToString();
		}

		static void AdditionalAttributes(StringBuilder sb, int attributes)
		{
			bool first = true;
			for (int bit = 0; bit < 32; bit++) {
				var value = 1 << bit;
				if ((attributes & value) != 0) {
					if (!first)
						sb.Append(", ");
					first = false;
					sb.Append(typeof(TypeAttributes).GetEnumName(value));
				}
			}
		}
	}
}
