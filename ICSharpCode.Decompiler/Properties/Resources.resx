<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DecompileEnumeratorsYieldReturn" xml:space="preserve">
    <value>Decompile enumerators (yield return)</value>
  </data>
  <data name="DecompileAnonymousMethodsLambdas" xml:space="preserve">
    <value>Decompile anonymous methods/lambdas</value>
  </data>
  <data name="DecompileAnonymousTypes" xml:space="preserve">
    <value>Decompile anonymous types</value>
  </data>
  <data name="UseLambdaSyntaxIfPossible" xml:space="preserve">
    <value>Use lambda syntax, if possible</value>
  </data>
  <data name="DecompileExpressionTrees" xml:space="preserve">
    <value>Decompile expression trees</value>
  </data>
  <data name="DecompileUseOfTheDynamicType" xml:space="preserve">
    <value>Decompile use of the 'dynamic' type</value>
  </data>
  <data name="DecompileAsyncMethods" xml:space="preserve">
    <value>Decompile async methods</value>
  </data>
  <data name="DecompileAwaitInCatchFinallyBlocks" xml:space="preserve">
    <value>Decompile await in catch/finally blocks</value>
  </data>
  <data name="DecompileDecimalConstantAsSimpleLiteralValues" xml:space="preserve">
    <value>Decompile [DecimalConstant(...)] as simple literal values</value>
  </data>
  <data name="DecompileC10PublicUnsafeFixedIntArr10Members" xml:space="preserve">
    <value>Decompile C# 1.0 'public unsafe fixed int arr[10];' members</value>
  </data>
  <data name="UseLiftedOperatorsForNullables" xml:space="preserve">
    <value>Use lifted operators for nullables</value>
  </data>
  <data name="DecompileAndOperators" xml:space="preserve">
    <value>Decompile ?. and ?[] operators</value>
  </data>
  <data name="DecompileAutomaticProperties" xml:space="preserve">
    <value>Decompile automatic properties</value>
  </data>
  <data name="DecompileAutomaticEvents" xml:space="preserve">
    <value>Decompile automatic events</value>
  </data>
  <data name="DetectUsingStatements" xml:space="preserve">
    <value>Detect using statements</value>
  </data>
  <data name="Other" xml:space="preserve">
    <value>Other</value>
  </data>
  <data name="AlwaysUseBraces" xml:space="preserve">
    <value>Always use braces</value>
  </data>
  <data name="DetectForeachStatements" xml:space="preserve">
    <value>Detect foreach statements</value>
  </data>
  <data name="DetectLockStatements" xml:space="preserve">
    <value>Detect lock statements</value>
  </data>
  <data name="DetectSwitchOnString" xml:space="preserve">
    <value>Detect switch on string</value>
  </data>
  <data name="InsertUsingDeclarations" xml:space="preserve">
    <value>Insert using declarations</value>
  </data>
  <data name="UseExtensionMethodSyntax" xml:space="preserve">
    <value>Use extension method syntax</value>
  </data>
  <data name="UseLINQExpressionSyntax" xml:space="preserve">
    <value>Use LINQ expression syntax</value>
  </data>
  <data name="UseImplicitMethodGroupConversions" xml:space="preserve">
    <value>Use implicit method group conversions</value>
  </data>
  <data name="AlwaysCastTargetsOfExplicitInterfaceImplementationCalls" xml:space="preserve">
    <value>Always cast targets of explicit interface implementation calls</value>
  </data>
  <data name="UseVariableNamesFromDebugSymbolsIfAvailable" xml:space="preserve">
    <value>Use variable names from debug symbols, if available</value>
  </data>
  <data name="ArrayInitializerExpressions" xml:space="preserve">
    <value>Array initializer expressions</value>
  </data>
  <data name="ObjectCollectionInitializerExpressions" xml:space="preserve">
    <value>Object/collection initializer expressions</value>
  </data>
  <data name="DictionaryInitializerExpressions" xml:space="preserve">
    <value>Dictionary initializer expressions</value>
  </data>
  <data name="AllowExtensionAddMethodsInCollectionInitializerExpressions" xml:space="preserve">
    <value>Allow extension 'Add' methods in collection initializer expressions</value>
  </data>
  <data name="UseStringInterpolation" xml:space="preserve">
    <value>Use string interpolation</value>
  </data>
  <data name="IncludeXMLDocumentationCommentsInTheDecompiledCode" xml:space="preserve">
    <value>Include XML documentation comments in the decompiled code</value>
  </data>
  <data name="UseExpressionBodiedMemberSyntaxForGetOnlyProperties" xml:space="preserve">
    <value>Use expression-bodied member syntax for get-only properties</value>
  </data>
  <data name="UseOutVariableDeclarations" xml:space="preserve">
    <value>Use out variable declarations</value>
  </data>
  <data name="UseDiscards" xml:space="preserve">
    <value>Use discards</value>
  </data>
  <data name="IsByRefLikeAttributeShouldBeReplacedWithRefModifiersOnStructs" xml:space="preserve">
    <value>IsByRefLikeAttribute should be replaced with 'ref' modifiers on structs</value>
  </data>
  <data name="IsReadOnlyAttributeShouldBeReplacedWithReadonlyInModifiersOnStructsParameters" xml:space="preserve">
    <value>IsReadOnlyAttribute should be replaced with 'readonly'/'in' modifiers on structs/parameters</value>
  </data>
  <data name="IsUnmanagedAttributeOnTypeParametersShouldBeReplacedWithUnmanagedConstraints" xml:space="preserve">
    <value>IsUnmanagedAttribute on type parameters should be replaced with 'unmanaged' constraints</value>
  </data>
  <data name="UseStackallocInitializerSyntax" xml:space="preserve">
    <value>Use stackalloc initializer syntax</value>
  </data>
  <data name="UseTupleTypeSyntax" xml:space="preserve">
    <value>Use tuple type syntax</value>
  </data>
  <data name="UseImplicitConversionsBetweenTupleTypes" xml:space="preserve">
    <value>Use implicit conversions between tuple types</value>
  </data>
  <data name="DetectTupleComparisons" xml:space="preserve">
    <value>Detect tuple comparisons</value>
  </data>
  <data name="UseNamedArguments" xml:space="preserve">
    <value>Use named arguments</value>
  </data>
  <data name="UseNonTrailingNamedArguments" xml:space="preserve">
    <value>Use non-trailing named arguments</value>
  </data>
  <data name="RemoveOptionalArgumentsIfPossible" xml:space="preserve">
    <value>Remove optional arguments, if possible</value>
  </data>
  <data name="IntroduceLocalFunctionsNOTIMPLEMENTED" xml:space="preserve">
    <value>Introduce local functions (NOT IMPLEMENTED!)</value>
  </data>
  <data name="C70LocalFunctionsAreNotImplemented" xml:space="preserve">
    <value>C# 7.0 local functions are not implemented!</value>
  </data>
  <data name="NullableReferenceTypes" xml:space="preserve">
    <value>Nullable reference types</value>
  </data>
  <data name="ShowInfoFromDebugSymbolsIfAvailable" xml:space="preserve">
    <value>Show info from debug symbols, if available</value>
  </data>
  <data name="VBSpecificOptions" xml:space="preserve">
    <value>VB-specific options</value>
  </data>
  <data name="FSpecificOptions" xml:space="preserve">
    <value>F#-specific options</value>
  </data>
  <data name="RemoveDeadAndSideEffectFreeCodeUseWithCaution" xml:space="preserve">
    <value>Remove dead and side effect free code (use with caution!)</value>
  </data>
  <data name="ApplyWindowsRuntimeProjectionsOnLoadedAssemblies" xml:space="preserve">
    <value>Apply Windows Runtime projections on loaded assemblies</value>
  </data>
</root>