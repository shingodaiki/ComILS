<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Navigation" xml:space="preserve">
    <value>导航</value>
  </data>
  <data name="Back" xml:space="preserve">
    <value>后退</value>
  </data>
  <data name="Forward" xml:space="preserve">
    <value>前进</value>
  </data>
  <data name="_CheckUpdates" xml:space="preserve">
    <value>检查更新(_C)</value>
  </data>
  <data name="_Help" xml:space="preserve">
    <value>帮助(_H)</value>
  </data>
  <data name="_File" xml:space="preserve">
    <value>文件(_F)</value>
  </data>
  <data name="Open" xml:space="preserve">
    <value>打开</value>
  </data>
  <data name="DEBUGDisassemble" xml:space="preserve">
    <value>DEBUG -- 反编译全部</value>
  </data>
  <data name="E_xit" xml:space="preserve">
    <value>退出(_X)</value>
  </data>
  <data name="Exit" xml:space="preserve">
    <value>退出</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>保存</value>
  </data>
  <data name="_Open" xml:space="preserve">
    <value>打开(_O)...</value>
  </data>
  <data name="OpenFrom_GAC" xml:space="preserve">
    <value>从_GAC中打开......</value>
  </data>
  <data name="Open_List" xml:space="preserve">
    <value>打开列表(_L)</value>
  </data>
  <data name="ReloadAssemblies" xml:space="preserve">
    <value>重新加载全部程序集</value>
  </data>
  <data name="DEBUGDecompile" xml:space="preserve">
    <value>DEBUG  - 全部反编译</value>
  </data>
  <data name="DEBUGDecompile100x" xml:space="preserve">
    <value>DEBUG  - 反编译100x</value>
  </data>
  <data name="GeneratePortable" xml:space="preserve">
    <value>生成可携带PDB</value>
  </data>
  <data name="RefreshCommand_ReloadAssemblies" xml:space="preserve">
    <value>重新加载程序集</value>
  </data>
  <data name="_Reload" xml:space="preserve">
    <value>重新加载(_R)</value>
  </data>
  <data name="_RemoveAssembliesWithLoadErrors" xml:space="preserve">
    <value>移除程序集及其加载错误(_R)</value>
  </data>
  <data name="Remove" xml:space="preserve">
    <value>移除</value>
  </data>
  <data name="_SaveCode" xml:space="preserve">
    <value>保存代码(_S)</value>
  </data>
  <data name="_ShowDebugSteps" xml:space="preserve">
    <value>显示调试步骤(_S)</value>
  </data>
  <data name="_View" xml:space="preserve">
    <value>视图(_V)</value>
  </data>
  <data name="SortAssembly_listName" xml:space="preserve">
    <value>按名称排列程序集列表(_L)</value>
  </data>
  <data name="View" xml:space="preserve">
    <value>视图</value>
  </data>
  <data name="SortAssemblyListName" xml:space="preserve">
    <value>按名称排列程序集列表</value>
  </data>
  <data name="_CollapseTreeNodes" xml:space="preserve">
    <value>折叠所有树节点(_C)</value>
  </data>
  <data name="CollapseTreeNodes" xml:space="preserve">
    <value>折叠所有树节点</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>名称</value>
  </data>
  <data name="ValueString" xml:space="preserve">
    <value>值(为字符串)</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>类型</value>
  </data>
  <data name="StringTable" xml:space="preserve">
    <value>字符串表</value>
  </data>
  <data name="Value" xml:space="preserve">
    <value>值</value>
  </data>
  <data name="_Resources" xml:space="preserve">
    <value>资源</value>
  </data>
  <data name="Download" xml:space="preserve">
    <value>下载</value>
  </data>
  <data name="Checking" xml:space="preserve">
    <value>检查...</value>
  </data>
  <data name="CheckUpdates" xml:space="preserve">
    <value>检查更新</value>
  </data>
  <data name="_About" xml:space="preserve">
    <value>关于(_A)</value>
  </data>
  <data name="Loading" xml:space="preserve">
    <value>加载中...</value>
  </data>
  <data name="References" xml:space="preserve">
    <value>引用</value>
  </data>
  <data name="ILSpyVersion" xml:space="preserve">
    <value>ILSpy版本</value>
  </data>
  <data name="Decompiling" xml:space="preserve">
    <value>正在反编译...</value>
  </data>
  <data name="Copy" xml:space="preserve">
    <value>复制</value>
  </data>
  <data name="Editor" xml:space="preserve">
    <value>编辑器</value>
  </data>
  <data name="Location" xml:space="preserve">
    <value>位置</value>
  </data>
  <data name="_SearchFor" xml:space="preserve">
    <value>搜索(_S):</value>
  </data>
  <data name="_Remove" xml:space="preserve">
    <value>移除(_R)</value>
  </data>
  <data name="_LoadDependencies" xml:space="preserve">
    <value>加载依赖(_L)</value>
  </data>
  <data name="Dependencies" xml:space="preserve">
    <value>依赖(_L)</value>
  </data>
  <data name="OK" xml:space="preserve">
    <value>确定</value>
  </data>
  <data name="SearchPane_Search" xml:space="preserve">
    <value>搜索</value>
  </data>
  <data name="Status" xml:space="preserve">
    <value>状态</value>
  </data>
  <data name="Font" xml:space="preserve">
    <value>字体</value>
  </data>
  <data name="OtherOptions" xml:space="preserve">
    <value>其他选项</value>
  </data>
  <data name="ShowLineNumbers" xml:space="preserve">
    <value>显示行号</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>取消</value>
  </data>
  <data name="Folding" xml:space="preserve">
    <value>折叠</value>
  </data>
  <data name="_AddMainList" xml:space="preserve">
    <value>添加到主列表(_A)</value>
  </data>
  <data name="_OpenContainingFolder" xml:space="preserve">
    <value>打开包含文件夹(_O)</value>
  </data>
  <data name="Shell" xml:space="preserve">
    <value>Shell</value>
  </data>
  <data name="_OpenCommandLineHere" xml:space="preserve">
    <value>在这里打开命令行(_O)</value>
  </data>
  <data name="CopyName" xml:space="preserve">
    <value>复制FQ名称</value>
  </data>
  <data name="CopyErrorMessage" xml:space="preserve">
    <value>复制错误信息</value>
  </data>
  <data name="VariableNamesFromDebugSymbolsAvailable" xml:space="preserve">
    <value>使用调试符号中的变量名称 (如果可用)</value>
  </data>
  <data name="ShowInfoFromDebugSymbolsAvailable" xml:space="preserve">
    <value>显示调试符号的信息 (如果可用)</value>
  </data>
  <data name="ShowDocumentationDecompiledCode" xml:space="preserve">
    <value>在反编译代码中显示 XML 文档</value>
  </data>
  <data name="EnableFoldingBlocksBraces" xml:space="preserve">
    <value>在大括号中的所有块上启用折叠</value>
  </data>
  <data name="RemoveDeadSideEffectFreeCode" xml:space="preserve">
    <value>删除死亡和副作用免费代码</value>
  </data>
  <data name="InsertUsingDeclarations" xml:space="preserve">
    <value>插入使用声明</value>
  </data>
  <data name="AlwaysBraces" xml:space="preserve">
    <value>始终使用大括号</value>
  </data>
  <data name="ExpandMemberDefinitionsAfterDecompilation" xml:space="preserve">
    <value>在反编译后展开成员定义</value>
  </data>
  <data name="ShowMetadataTokens" xml:space="preserve">
    <value>显示元数据标记</value>
  </data>
  <data name="EnableWordWrap" xml:space="preserve">
    <value>启用自动换行</value>
  </data>
  <data name="AllowMultipleInstances" xml:space="preserve">
    <value>允许多个实例</value>
  </data>
  <data name="ToggleFolding" xml:space="preserve">
    <value>切换所有折叠</value>
  </data>
  <data name="DerivedTypes" xml:space="preserve">
    <value>派生类型</value>
  </data>
  <data name="ResourcesFileFilter" xml:space="preserve">
    <value>资源文件 (*.resources)|*.resources|XML资源文件|*.resx  </value>
  </data>
  <data name="SortResultsFitness" xml:space="preserve">
    <value>排序结果自适应</value>
  </data>
  <data name="_Reset" xml:space="preserve">
    <value>重置(_R)</value>
  </data>
  <data name="OpenListDialog__Delete" xml:space="preserve">
    <value>删除(_D)</value>
  </data>
  <data name="OpenListDialog__Open" xml:space="preserve">
    <value>打开(_O)</value>
  </data>
  <data name="_Create" xml:space="preserve">
    <value>创建(_C)</value>
  </data>
  <data name="ReferenceName" xml:space="preserve">
    <value>引用名称</value>
  </data>
  <data name="Version" xml:space="preserve">
    <value>Version  </value>
  </data>
  <data name="Culture" xml:space="preserve">
    <value>Culture  </value>
  </data>
  <data name="PublicToken" xml:space="preserve">
    <value>Public Key Token  </value>
  </data>
  <data name="OpenList" xml:space="preserve">
    <value>打开列表</value>
  </data>
  <data name="SelectList" xml:space="preserve">
    <value>选择一个列表:</value>
  </data>
  <data name="_Search" xml:space="preserve">
    <value>搜索(_S):</value>
  </data>
  <data name="OpenFrom" xml:space="preserve">
    <value>从 GAC 打开</value>
  </data>
  <data name="NugetPackageBrowser" xml:space="preserve">
    <value>Nuget 包浏览器</value>
  </data>
  <data name="List" xml:space="preserve">
    <value>新建列表</value>
  </data>
  <data name="SelectAssembliesOpen" xml:space="preserve">
    <value>选择要打开的程序集:</value>
  </data>
  <data name="Create" xml:space="preserve">
    <value>创建</value>
  </data>
  <data name="EnterListName" xml:space="preserve">
    <value>输入列表名称:</value>
  </data>
  <data name="Analyze" xml:space="preserve">
    <value>分析</value>
  </data>
  <data name="_ToggleFolding" xml:space="preserve">
    <value>切换折叠</value>
  </data>
  <data name="Select" xml:space="preserve">
    <value>全部选择</value>
  </data>
  <data name="OpenExplorer" xml:space="preserve">
    <value>打开资源管理器</value>
  </data>
  <data name="AllFiles" xml:space="preserve">
    <value>|所有文件 |*.*</value>
  </data>
  <data name="SaveCode" xml:space="preserve">
    <value>保存代码</value>
  </data>
  <data name="DisplayCode" xml:space="preserve">
    <value>显示代码</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>搜索...</value>
  </data>
  <data name="SearchAbortedMoreThan1000ResultsFound" xml:space="preserve">
    <value>搜索已中止, 发现超过1000个结果。</value>
  </data>
  <data name="Searching" xml:space="preserve">
    <value>搜索...</value>
  </data>
  <data name="CheckAgain" xml:space="preserve">
    <value>再次检查</value>
  </data>
  <data name="UpdateILSpyFound" xml:space="preserve">
    <value>找不到 ILSpy 的更新。</value>
  </data>
  <data name="ILSpyVersionAvailable" xml:space="preserve">
    <value>新的 ILSpy 版本可用。</value>
  </data>
  <data name="StandBy" xml:space="preserve">
    <value>就绪...</value>
  </data>
  <data name="ShowInternalTypesMembers" xml:space="preserve">
    <value>显示内部类型和成员</value>
  </data>
  <data name="Show_internalTypesMembers" xml:space="preserve">
    <value>显示内部类型和成员(_I)</value>
  </data>
  <data name="UsingNightlyBuildNewerThanLatestRelease" xml:space="preserve">
    <value>您使用的是每日构建版本，比最新版本更新。</value>
  </data>
  <data name="VersionAvailable" xml:space="preserve">
    <value>版本 {0} 已可用。</value>
  </data>
  <data name="UsingLatestRelease" xml:space="preserve">
    <value>您使用的是最新版本。</value>
  </data>
  <data name="AutomaticallyCheckUpdatesEveryWeek" xml:space="preserve">
    <value>每周自动检查更新</value>
  </data>
  <data name="WatermarkText" xml:space="preserve">
    <value>搜索 t:TypeName, m:Member 或c:Constant; 使用完全匹配 (=term), '不应包含' (-term) 或 '必须包含' (+term); 使用 /reg(ular)?Ex(pressions)?/或两者 - t:/Type(Name)?/...  </value>
  </data>
</root>